//solution 1: brute force

//C++
vector<int> twoSum(vector<int>& nums, int target) {
    for (int i = 0; i < nums.size(); ++i)
        for (int j = i+1; j < nums.size(); ++j)       
            if ((nums[i] + nums[j]) == target)
                return { i,j };
         
    return {};
}

//Java
public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;++i){
            for(int j=i+1;j<nums.length;++j){
                if(nums[i]+nums[j]==target){
                    return new int[] {i,j};
                }
            }
        }
        return new int[] {};
    }


//solution 2: hash table

//C++
vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int,int> numMap;
    int n = nums.size();

    for(int i=0;i<n;++i){
        int complement = target-nums[i];
        if(numMap.count(complement)){
            return {i, numMap[complement]};
        }
        numMap[nums[i]] = i;
    }
    return {};
}

//Java
public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numToIndex = new HashMap<>();
        for(int i=0;i<nums.length;++i){
            if(numToIndex.containsKey(target-nums[i])){
                return new int [] {numToIndex.get(target-nums[i]), i};
            }
            numToIndex.put(nums[i],i);
        }
        return new int[] {};
    }